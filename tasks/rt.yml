---
- include_vars: rt_rpm_deps.yml
- name: Install RPM deps for RT
  yum:
    name: "{{ item }}"
    state: installed
  with_items: "{{ rt_rpm_deps }}"
  notify: Pull /var/cache/yum


- name: Create /opt/src
  file:
    path: /opt/src
    state: directory

- include_vars: rt_versions.yml
- name: Download RT
  get_url:
    url: https://download.bestpractical.com/pub/rt/release/{{ rt_version }}.tar.gz
    dest: /opt/src/{{ rt_version }}.tar.gz
    validate_certs: yes
    sha256sum: "{{ rt[rt_version].checksum }}"
    force: no

- name: Untar and ungzip RT
  unarchive:
    copy: no
    src: /opt/src/{{ rt_version }}.tar.gz
    dest: /opt/src
    creates: /opt/src/{{ rt_version }}
    owner: root
    group: root

- name: Configure RT
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  shell: |
    source ${PERLBREW_ROOT}/etc/bashrc
    perlbrew switch 5.10.1
    ./configure \
    --enable-developer \
    --enable-graphviz \
    --enable-gd \
    --enable-gpg \
    --enable-smime
  args:
    chdir: /opt/src/{{ rt_version }}
    creates: /opt/src/{{ rt_version }}/config.status

- name: Test RT dependencies
  shell: |
    source ${PERLBREW_ROOT}/etc/bashrc
    /usr/local/bin/perlbrew switch 5.10.1
    make testdeps
  args:
    chdir: /opt/src/{{ rt_version }}
  register: testdeps
  changed_when: False

## TODO: Investigate running make fixdeps with
## RT_FIX_DEPS_CMD=/opt/perl/bin/cpanm
- include_vars: rt_cpan_deps.yml
- name: Install RT CLI deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.CLI }}
  when: testdeps|failed
- name: Install RT CORE deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.CORE }}
  when: testdeps|failed
- name: Install RT DASHBOARDS deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.DASHBOARDS }}
  when: testdeps|failed
- name: Install RT DEVELOPER deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.DEVELOPER }}
  when: testdeps|failed
- name: Install RT FASTCGI deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.FASTCGI }}
  when: testdeps|failed
- name: Install RT GD deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.GD }}
  when: testdeps|failed
- name: Install RT GPG deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.GPG }}
  when: testdeps|failed
- name: Install RT GRAPHVIZ deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.GRAPHVIZ }}
  when: testdeps|failed
- name: Install RT HTML-DOC deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.HTMLDOC }}
  when: testdeps|failed
- name: Install RT ICAL deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.ICAL }}
  when: testdeps|failed
- name: Install RT MAILGATE deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.MAILGATE }}
  when: testdeps|failed
- name: Install RT MYSQL deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.MYSQL }}
  when: testdeps|failed
- name: Install RT SMIME deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.SMIME }}
  when: testdeps|failed
- name: Install RT USERLOGO deps with CPAN Minus  
  include: perlbrew_cpanm.yml packages={{ rt_cpan_deps.USERLOGO }}
  when: testdeps|failed

- name: Test RT dependencies (again)
  shell: |
    source ${PERLBREW_ROOT}/etc/bashrc
    /usr/local/bin/perlbrew switch 5.10.1
    make testdeps
  args:
    chdir: /opt/src/{{ rt_version }}
  changed_when: False
  
- name: Install RT
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  shell: |
    source ${PERLBREW_ROOT}/etc/bashrc
    /usr/local/bin/perlbrew switch 5.10.1
    make install
  args:
    chdir: /opt/src/{{ rt_version }}
    creates: /opt/rt4

- name: Install RT_SiteConfig.pm
  template:
    src: RT_SiteConfig.pm
    dest: /opt/rt4/etc/RT_SiteConfig.pm
    backup: yes
  notify: Restart Apache

- name: Test rt4 database presence
  command: >
    /bin/mysql --user=root --password={{ mysql_root_password }}
    --batch --execute='show databases;'
  register: rt4_db_test
  changed_when: False

- name: Initialize RT database
  shell: echo {{ mysql_root_password }} | make initialize-database
  args:
    chdir: /opt/src//{{ rt_version }}
  when: '"rt4" not in rt4_db_test.stdout_lines'

- name: Set RT directory attributes
  file:
    path: /opt/rt4
    recurse: yes
    owner: root
    group: root
    mode: o+r
    seuser: system_u
    serole: object_r
    setype: httpd_sys_content_t

- name: Set RT server fcgi script attributes
  file:
    path: /opt/rt4/sbin/rt-server.fcgi
    owner: root
    group: root
    mode: o+r
    setype: httpd_sys_script_exec_t

- name: Set RT Mason data attributes
  file:
    path: /opt/rt4/var/mason_data
    owner: root
    group: root
    mode: o+rx
    
- name: Set RT Mason obj attributes
  file:
    path: /opt/rt4/var/mason_data/obj
    owner: root
    group: root
    mode: o+rwx
    setype: httpd_fastcgi_rw_content_t
